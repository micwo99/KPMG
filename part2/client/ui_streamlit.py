import os
import json
import requests
import streamlit as st
from dotenv import load_dotenv

# ==================== Config ====================
load_dotenv()
API_BASE = os.getenv("API_BASE", "http://127.0.0.1:8000")

st.set_page_config(
    page_title="Part 2 ‚Äì HMO Chatbot (Stateless)",
    page_icon="üè•",
    layout="centered",
    initial_sidebar_state="expanded",
)

# ==================== Styles (Minimalist) ====================
BASE_CSS = """
<style>
/* CSS to adjust general layout */
.block-container { padding-top: 1.5rem; }
.st-emotion-cache-12fmw11 { /* Targets the chat form */
    padding-bottom: 0 !important;
}
.stTabs [data-testid="st-emotion-cache-1c9v1s6"] { /* Targets the info box */
    margin-bottom: 1.5rem;
}
.rtl { direction: rtl; }
.ltr { direction: ltr; }
</style>
"""
st.markdown(BASE_CSS, unsafe_allow_html=True)

# ==================== Stateless client-state ====================
if "lang" not in st.session_state:
    st.session_state.lang = "he"
if "intake_history" not in st.session_state:
    st.session_state.intake_history = []
if "qa_history" not in st.session_state:
    st.session_state.qa_history = []
if "userinfo" not in st.session_state:
    st.session_state.userinfo = {
        "firstName": "", "lastName": "", "id": "", "gender": "",
        "age": 0, "hmo": "", "hmoCard": "", "tier": ""
    }
if "intake_done" not in st.session_state:
    st.session_state.intake_done = False
# New state variable to control the active tab
if "active_tab" not in st.session_state:
    st.session_state.active_tab = "intake"

# ==================== Functions & Translations ====================
def mask_id(s: str):
    s = s or ""
    return ("*"*5 + s[-4:]) if len(s) >= 4 else s

translations = {
    "he": {
        "sidebar_title": "‚öôÔ∏è ◊î◊í◊ì◊®◊ï◊™",
        "sidebar_reset": "◊ê◊§◊° üîÅ",
        "sidebar_build_index": "◊ë◊†◊î ◊ê◊ô◊†◊ì◊ß◊° üß±",
        "sidebar_summary": "üë§ ◊°◊ô◊õ◊ï◊ù ◊û◊©◊™◊û◊©",
        "sidebar_name": "◊©◊ù",
        "sidebar_hmo": "◊ß◊ï◊§◊î",
        "sidebar_tier": "◊ó◊ë◊ô◊ú◊î",
        "sidebar_gender": "◊û◊í◊ì◊®",
        "sidebar_age": "◊í◊ô◊ú",
        "sidebar_card": "◊õ◊®◊ò◊ô◊°",
        "sidebar_id": "◊™.◊ñ.",
        "header_title": "üè• ◊ó◊ú◊ß 2 ‚Äì ◊¶'◊ê◊ò◊ë◊ï◊ò ◊ß◊ï◊§◊™ ◊ó◊ï◊ú◊ô◊ù",
        "header_caption": "◊®◊ô◊©◊ï◊ù (LLM) ‚Üí ◊©◊ê◊ú◊ï◊™ ◊ï◊™◊©◊ï◊ë◊ï◊™ ◊¢◊ú ◊†◊™◊ï◊†◊ô◊ù (◊¢◊ë◊®◊ô◊™/◊ê◊†◊í◊ú◊ô◊™)",
        "tab_intake": "◊®◊ô◊©◊ï◊ù",
        "tab_qa": "◊©◊ê◊ú◊ï◊™",
        "subheader_intake": "◊©◊ú◊ë 1 ‚Äì ◊®◊ô◊©◊ï◊ù",
        "subheader_qa": "◊©◊ú◊ë 2 ‚Äì ◊©◊ê◊ú◊ï◊™ ◊ï◊™◊©◊ï◊ë◊ï◊™",
        "info_intake": "◊ê◊†◊ê ◊°◊§◊ß ◊§◊®◊ò◊ô◊ù ◊ê◊ô◊©◊ô◊ô◊ù (◊©◊ù ◊§◊®◊ò◊ô ◊ï◊û◊©◊§◊ó◊î, ◊™◊¢◊ï◊ì◊™ ◊ñ◊î◊ï◊™, ◊í◊ô◊ú, ◊û◊í◊ì◊®, ◊ß◊ï◊§◊™ ◊ó◊ï◊ú◊ô◊ù, ◊û◊°◊§◊® ◊õ◊®◊ò◊ô◊° ◊ï◊ó◊ë◊ô◊ú◊î) ◊ì◊®◊ö ◊î◊¶'◊ê◊ò. ◊ê◊ô◊ü ◊ò◊ï◊§◊° ‚Äî ◊î◊¢◊ï◊ñ◊® ◊ô◊†◊ó◊î ◊ê◊ï◊™◊ö ◊©◊ú◊ë-◊ê◊ó◊®-◊©◊ú◊ë.",
        "info_qa": "◊ú◊ê◊ó◊® ◊î◊©◊ú◊û◊™ ◊©◊ú◊ë ◊î◊®◊ô◊©◊ï◊ù, ◊†◊ô◊™◊ü ◊ú◊©◊ê◊ï◊ú ◊©◊ê◊ú◊ï◊™ ◊¢◊ú ◊î◊ò◊ë◊ï◊™/◊ñ◊õ◊ê◊ï◊ô◊ï◊™ ◊ú◊§◊ô ◊î◊ß◊ï◊§◊î ◊ï◊î◊ó◊ë◊ô◊ú◊î ◊©◊ú◊ö. ◊î◊™◊©◊ï◊ë◊ï◊™ ◊û◊ë◊ï◊°◊°◊ï◊™ ◊¢◊ú ◊î◊û◊ô◊ì◊¢ ◊©◊ë◊û◊°◊û◊õ◊ô ◊î◊û◊ß◊ï◊®.",
        "warning_not_done": "◊ê◊†◊ê ◊°◊ô◊ô◊ù ◊™◊ó◊ô◊ú◊î ◊ê◊™ ◊©◊ú◊ë ◊î◊®◊ô◊©◊ï◊ù.",
        "input_intake": "◊õ◊™◊ï◊ë ◊î◊ï◊ì◊¢◊î...",
        "input_qa": "◊©◊ê◊ú ◊©◊ê◊ú◊î ◊¢◊ú ◊î◊ñ◊õ◊ï◊ô◊ï◊™ ◊©◊ú◊ö...",
        "spinner_thinking": "◊ó◊ï◊©◊ë...",
        "spinner_searching": "◊û◊ó◊§◊© ◊ë◊ë◊°◊ô◊° ◊î◊†◊™◊ï◊†◊ô◊ù...",
        "success_intake": "◊î◊®◊ô◊©◊ï◊ù ◊î◊ï◊©◊ú◊ù ◊ë◊î◊¶◊ú◊ó◊î ‚úì",
        "toast_reset": "◊î◊©◊ô◊ó◊î ◊ê◊ï◊™◊ó◊ú◊î",
        "toast_answer_ready": "◊î◊™◊©◊ï◊ë◊î ◊û◊ï◊õ◊†◊î",
        "answer_title": "◊™◊©◊ï◊ë◊î",
        "sources_title": "◊û◊ß◊ï◊®◊ï◊™"
    },
    "en": {
        "sidebar_title": "‚öôÔ∏è Settings",
        "sidebar_reset": "Reset üîÅ",
        "sidebar_build_index": "Build KB index üß±",
        "sidebar_summary": "üë§ User summary",
        "sidebar_name": "Name",
        "sidebar_hmo": "HMO",
        "sidebar_tier": "Tier",
        "sidebar_gender": "Gender",
        "sidebar_age": "Age",
        "sidebar_card": "Card",
        "sidebar_id": "ID",
        "header_title": "üè• Part 2 ‚Äì HMO Chatbot",
        "header_caption": "Intake (LLM-led) ‚Üí Q&A on phase2_data (Heb/Eng)",
        "tab_intake": "Intake",
        "tab_qa": "Q&A",
        "subheader_intake": "Phase 1 ‚Äì Intake",
        "subheader_qa": "Phase 2 ‚Äì Q&A",
        "info_intake": "Please provide your details (first/last name, ID, age, gender, HMO, card number, membership tier) via chat. There is no form‚Äîthe assistant will guide you step by step.",
        "info_qa": "After completing intake, ask about your benefits/coverage based on your HMO and membership tier. Answers are grounded in the provided knowledge base.",
        "warning_not_done": "Finish intake first.",
        "input_intake": "Type a message...",
        "input_qa": "Ask about your HMO benefits...",
        "spinner_thinking": "Thinking...",
        "spinner_searching": "Searching knowledge base...",
        "success_intake": "Intake complete ‚úì",
        "toast_reset": "Conversation reset",
        "toast_answer_ready": "Answer ready",
        "answer_title": "Answer",
        "sources_title": "Sources"
    }
}
lang = st.session_state.lang
t = translations[lang]

# ==================== Sidebar ====================
with st.sidebar:
    st.markdown(f"### {t['sidebar_title']}")
    st.selectbox("Language / ◊©◊§◊î", ["en", "he"], index=0 if lang == "en" else 1, key="lang")

    col_sb1, col_sb2 = st.columns(2)
    with col_sb1:
        if st.button(t['sidebar_reset'], use_container_width=True):
            st.session_state.intake_history = []
            st.session_state.qa_history = []
            st.session_state.intake_done = False
            st.session_state.userinfo = {
                "firstName": "", "lastName": "", "id": "", "gender": "",
                "age": 0, "hmo": "", "hmoCard": "", "tier": ""
            }
            st.session_state.active_tab = "intake" # Reset active tab
            st.toast(t['toast_reset'], icon="‚ôªÔ∏è")
            st.rerun()
    with col_sb2:
        if st.button(t['sidebar_build_index'], use_container_width=True):
            try:
                with st.spinner("Building KB on server..."):
                    r = requests.post(f"{API_BASE}/build_index", timeout=180)
                st.success(r.json())
            except Exception as e:
                st.error(str(e))

    st.markdown("---")
    st.markdown(f"#### {t['sidebar_summary']}")
    ui = st.session_state.userinfo
    
    st.markdown(f"**{t['sidebar_name']}:** {ui.get('firstName','')} {ui.get('lastName','')}")
    st.markdown(f"**{t['sidebar_hmo']}:** {ui.get('hmo','') or '-'}")
    st.markdown(f"**{t['sidebar_tier']}:** {ui.get('tier','') or '-'}")
    st.markdown(f"**{t['sidebar_gender']}:** {ui.get('gender','') or '-'}")
    st.markdown(f"**{t['sidebar_age']}:** {ui.get('age','') or '-'}")
    st.markdown(f"**{t['sidebar_card']}:** {mask_id(ui.get('hmoCard',''))}")
    st.markdown(f"**{t['sidebar_id']}:** {mask_id(ui.get('id',''))}")

# ==================== Header ====================
st.title(t["header_title"])
st.caption(t["header_caption"])

# Use st.tabs with a key, and select the default tab based on session state
tab1, tab2 = st.tabs([f"{t['tab_intake']} / ◊®◊ô◊©◊ï◊ù", f"{t['tab_qa']} / ◊©◊ê◊ú◊ï◊™"])

# ==================== Intake Tab ====================
with tab1:
    st.subheader(t["subheader_intake"])
    st.info(t["info_intake"])

    # Loop to display all messages from the beginning of the history
    for message in st.session_state.intake_history:
        with st.chat_message(message["role"]):
            st.write(message["content"])

    # Handle a new user prompt
    if not st.session_state.intake_done:
        prompt = st.chat_input(t["input_intake"], key="intake_input")
        if prompt:
            st.session_state.intake_history.append({"role": "user", "content": prompt})
            st.rerun() # Rerun to display the user message immediately

# ==================== Q&A Tab ====================
with tab2:
    st.subheader(t["subheader_qa"])
    st.info(t["info_qa"])

    if not st.session_state.intake_done:
        st.warning(t["warning_not_done"])
    else:
        # Loop to display all messages from the beginning of the history
        for message in st.session_state.qa_history:
            with st.chat_message(message["role"]):
                st.write(message["content"])
        
        # Handle a new user prompt
        prompt = st.chat_input(t["input_qa"], key="qa_input")
        if prompt:
            st.session_state.qa_history.append({"role": "user", "content": prompt})
            st.rerun() # Rerun to display the user message immediately

# ==================== API Calls after chat inputs ====================
# This section is moved outside the with tab1/with tab2 blocks to ensure it runs
# only once per interaction cycle, regardless of which tab is active.

# This check prevents an infinite loop of reruns
if "processing" not in st.session_state:
    st.session_state.processing = False

if st.session_state.active_tab == "intake" and not st.session_state.intake_done:
    if len(st.session_state.intake_history) > 0 and st.session_state.intake_history[-1]["role"] == "user" and not st.session_state.processing:
        st.session_state.processing = True
        payload = {
            "history": st.session_state.intake_history,
            "user_info": st.session_state.userinfo,
            "lang": lang,
        }
        with st.spinner(t["spinner_thinking"]):
            r = requests.post(f"{API_BASE}/collect", json=payload, timeout=90)
        res = r.json()
        if "detail" in res:
            st.error(res["detail"])
        else:
            assistant_message = res.get("message", "")
            st.session_state.intake_history.append({"role": "assistant", "content": assistant_message})
            st.session_state.userinfo.update(res.get("userinfo", {}))
            if res.get("phase") == "DONE":
                st.session_state.intake_done = True
                st.balloons()
                st.success(t["success_intake"])
                st.session_state.active_tab = "qa" # Switch to Q&A tab
        st.session_state.processing = False
        st.rerun()

elif st.session_state.active_tab == "qa" and st.session_state.intake_done:
    if len(st.session_state.qa_history) > 0 and st.session_state.qa_history[-1]["role"] == "user" and not st.session_state.processing:
        st.session_state.processing = True
        prompt = st.session_state.qa_history[-1]["content"]
        payload = {
            "history": st.session_state.qa_history,
            "user_info": st.session_state.userinfo,
            "question": prompt,
            "lang": lang
        }
        with st.spinner(t["spinner_searching"]):
            r = requests.post(f"{API_BASE}/chat", json=payload, timeout=120)
        res = r.json()
        if "detail" in res:
            st.error(res["detail"])
        else:
            answer = res.get("answer", "")
            sources = res.get("sources", []) or []
            # Format the answer with sources
            full_answer = f"**{t['answer_title']}:** {answer}"
            if sources:
                full_answer += "\n\n---"
                full_answer += f"\n\n**{t['sources_title']}:**"
                for s in sources:
                    full_answer += f"\n- {s}"
            st.session_state.qa_history.append({"role": "assistant", "content": full_answer})
            st.toast(t["toast_answer_ready"], icon="‚úÖ")
        st.session_state.processing = False
        st.rerun()